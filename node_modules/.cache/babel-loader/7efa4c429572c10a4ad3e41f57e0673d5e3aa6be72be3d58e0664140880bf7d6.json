{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n// export const updateCollections = collectionsMap => ({\n//   type: ShopActionTypes.UPDATE_COLLECTIONS,\n//   payload: collectionsMap\n// });\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    // to switch `isFetching` to be true\n    // can dispatch in here because redux-thunk\n    dispatch(fetchCollectionsStart);\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","collectionsMap","catch","error","message"],"sources":["/Users/paulsirbu/WebstormProjects/frontend/src/redux/shop/shop.actions.js"],"sourcesContent":["import ShopActionTypes from './shop.types';\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap\n} from '../../firebase/firebase.utils';\n// export const updateCollections = collectionsMap => ({\n//   type: ShopActionTypes.UPDATE_COLLECTIONS,\n//   payload: collectionsMap\n// });\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\n\nexport const fetchCollectionsSuccess = collectionMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionMap\n});\n\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    // to switch `isFetching` to be true\n    // can dispatch in here because redux-thunk\n    dispatch(fetchCollectionsStart);\n\n    collectionRef\n      .get()\n      .then(snapshot => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,cAAc;AAC1C,SACEC,SAAS,EACTC,+BAA+B,QAC1B,+BAA+B;AACtC;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,MAAO;EAC1CC,IAAI,EAAEJ,eAAe,CAACK;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,uBAAuB,GAAGC,aAAa,KAAK;EACvDH,IAAI,EAAEJ,eAAe,CAACQ,yBAAyB;EAC/CC,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;EACtDP,IAAI,EAAEJ,eAAe,CAACY,yBAAyB;EAC/CH,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,0BAA0B,GAAGA,CAAA,KAAM;EAC9C,OAAOC,QAAQ,IAAI;IACjB,MAAMC,aAAa,GAAGd,SAAS,CAACe,UAAU,CAAC,aAAa,CAAC;IACzD;IACA;IACAF,QAAQ,CAACX,qBAAqB,CAAC;IAE/BY,aAAa,CACVE,GAAG,CAAC,CAAC,CACLC,IAAI,CAACC,QAAQ,IAAI;MAChB,MAAMC,cAAc,GAAGlB,+BAA+B,CAACiB,QAAQ,CAAC;MAChEL,QAAQ,CAACR,uBAAuB,CAACc,cAAc,CAAC,CAAC;IACnD,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIR,QAAQ,CAACJ,uBAAuB,CAACY,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;EACrE,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}